{
  // This is a Parsing Expression Grammar (PEG) for a simple calculator.
  // Generate the .go file with '$GOPATH/bin/pigeon $GOPATH/src/calc/calc.peg | $GOPATH/bin/goimports > $GOPATH/src/calc/peg.go'
  // This block is the initializer

  package main

  import (
    "math/big"
  )

	func toIfaceSlice(v interface{}) []interface{} {
		if v == nil {
			return nil
		}
		return v.([]interface{})
	}
}

Input "input" <- n:Expr EOF {
  return n, nil
}

Expr "expression" <- _ n:(ComplexExpr / Paren) _ {
  return n, nil
}

ComplexExpr "complex expression" <- num:Paren rest:(_ Op _ Paren)*  {

	var err error

	acc := num
	for _, v := range toIfaceSlice(rest) {
		list := toIfaceSlice(v)

		// In the list item 0 is spaces, 1 is op, 2 is spaces, 3 is operand
		o := rune(list[1].([]uint8)[0])
		acc, err = eval(o, acc, list[3])
		if err != nil {
			return acc, err
		}
	}

	return acc, nil
}

Paren <- '(' e:Expr ')' {
  return e, nil
} / n:Number {
  return n, nil
}

Number <- n:(Float / Int) {
  return n, nil
}

Float "float" <- [0-9]* '.' [0-9]+ {
  f := new(big.Float)
  _, err := fmt.Sscan(string(c.text), f)
  return f, err
}

Int "int" <- [0-9]+ {
  i := new(big.Int)
  _, err := fmt.Sscan(string(c.text), i)
  return i, err
}

Op <- '+' / '-' / '*' / '/' / '^'

_ "spaces" <- [ \t]*

EOF <- !.
