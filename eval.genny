package main

import (
  "github.com/cheekybits/genny/generic"
	"bytes"
)

type Number generic.Type

func AddNumber(a, b *Number) (r *Number, err error) {
	r = a.Add(a, b)
	return
}

func SubNumber(a, b *Number) (r *Number, err error) {
	r = a.Sub(a, b)
	return
}

func MulNumber(a, b *Number) (r *Number, err error) {
	r = a.Mul(a, b)
	return
}

func QuoNumber(a, b *Number) (r *Number, err error) {
	r = a.Quo(a, b)
	return
}

func NegNumber(a *Number) (r *Number, err error) {
	r = a.Neg(a)
	return
}

func LtNumber(a, b *Number) (r *big.Int, err error) {
  r = big.NewInt(0)
  v := a.Cmp(b)
	if v < 0 {
	  r.SetInt64(1)
	}
	return
}

func LteNumber(a, b *Number) (r *big.Int, err error) {
  r = big.NewInt(0)
  v := a.Cmp(b)
	if v <= 0 {
	  r.SetInt64(1)
	}
	return
}

func GtNumber(a, b *Number) (r *big.Int, err error) {
  r = big.NewInt(0)
  v := a.Cmp(b)
	if v > 0 {
	  r.SetInt64(1)
	}
	return
}

func GteNumber(a, b *Number) (r *big.Int, err error) {
  r = big.NewInt(0)
  v := a.Cmp(b)
	if v >= 0 {
	  r.SetInt64(1)
	}
	return
}

func EqlNumber(a, b *Number) (r *big.Int, err error) {
  r = big.NewInt(0)
  v := a.Cmp(b)
	if v == 0 {
	  r.SetInt64(1)
	}
	return
}

func NewNumberList(l []interface{}) ( NumberList, error) {
  r := make( NumberList, len(l))

	for i,v := range l{
		var ok bool
		r[i], ok = v.(*Number)
		if !ok {
			return nil, fmt.Errorf("list element at index %d is not a Number\n", i)
		}
	}

	return r, nil
}

func (l NumberList) Eql(o interface{}) bool {
	b, ok := o.( NumberList)
	if !ok {
		return false
	}

	if len(l) != len(b) {
		return false
	}

	for i,v := range l {
		if v.Cmp(b[i]) != 0 {
		  return false
		}
	}

	return true
}

func (l NumberList) String() string {
  var buf bytes.Buffer
	buf.WriteRune('[')
  for i, n := range l {
    if i > 0 {
      fmt.Fprintf(&buf, ", ")
		}
    fmt.Fprintf(&buf, "%v", n)
	}
	buf.WriteRune(']')
  return buf.String()
}

func (l NumberList) apply(a, b NumberList, fn func(self, a, b *Number) *Number) ( NumberList, error) {
  if len(a) != len(b) {
		return nil, fmt.Errorf("NumberList.apply: lists are different lengths")
	}

	for i,v := range a {
    l[i] = fn(v, v, b[i])
	}

	return l, nil
}

func (l NumberList) applyMonadic(a NumberList, fn func(self, a *Number) *Number) ( NumberList, error) {
	for i,v := range a {
    l[i] = fn(v, a[i])
	}

	return l, nil
}


func (l NumberList) Add(a, b NumberList) (n NumberList, err error) {
	return l.apply(a, b, (*Number).Add)
}

func (l NumberList) add(a, b NumberList) (n NumberList, err error) {
	return l.Add(a, b)
}

func (l NumberList) Sub(a, b NumberList) (n NumberList, err error) {
	return l.apply(a, b, (*Number).Sub)
}

func (l NumberList) sub(a, b NumberList) (n NumberList, err error) {
	return l.Sub(a, b)
}

func (l NumberList) Mul(a, b NumberList) (n NumberList, err error) {
	return l.apply(a, b, (*Number).Mul)
}

func (l NumberList) mul(a, b NumberList) (n NumberList, err error) {
	return l.Mul(a, b)
}

func (l NumberList) Quo(a, b NumberList) (n NumberList, err error) {
	return l.apply(a, b, (*Number).Quo)
}

func (l NumberList) quo(a, b NumberList) (n NumberList, err error) {
	return l.Quo(a, b)
}

func (l NumberList) Lt(a, b NumberList) (n *big.Int, err error) {
	return nil, fmt.Errorf("relational operators are not defined for lists")
}

func (l NumberList) lt(a, b NumberList) (n *big.Int, err error) {
	return l.Lt(a, b)
}

func (l NumberList) Lte(a, b NumberList) (n *big.Int, err error) {
	return nil, fmt.Errorf("relational operators are not defined for lists")
}

func (l NumberList) lte(a, b NumberList) (n *big.Int, err error) {
	return l.Lte(a, b)
}

func (l NumberList) Gt(a, b NumberList) (n *big.Int, err error) {
	return nil, fmt.Errorf("relational operators are not defined for lists")
}

func (l NumberList) gt(a, b NumberList) (n *big.Int, err error) {
	return l.Gt(a, b)
}

func (l NumberList) Gte(a, b NumberList) (n *big.Int, err error) {
	return nil, fmt.Errorf("relational operators are not defined for lists")
}

func (l NumberList) gte(a, b NumberList) (n *big.Int, err error) {
	return l.Gte(a, b)
}

func (l NumberList) eql(o interface{}) (n *big.Int, err error) {
  n = big.NewInt(0)
	if l.Eql(o) {
	  n.SetInt64(1)
	}
	return
}

func (l NumberList) Neg(a NumberList) (n NumberList, err error) {
	for i,v := range a {
    l[i] = v.Neg(v)
	}

	return l, nil
}

func (l NumberList) neg(a NumberList) (n NumberList, err error) {
	return l.Neg(a)
}

func listReverseNumber(l interface{}) (l2 interface{}, err error) {

	ll := l.( NumberList)

	ll2 := make( NumberList, len(ll))
	for i, v := range ll {
		ll2[len(ll)-i-1] = cloneNumber(v)
	}

	l2 = ll2

	return
}

func listRepeatNumber(e *Number, n *big.Int) (l NumberList, err error) {
	i := int(n.Uint64())

	if i < 0 {
		return nil, fmt.Errorf("Repeat count must be positive")
	}

	l = make( NumberList, i)
	for j := range l {
		l[j] = cloneNumber(e)
	}

	return
}

func listMapNumberList(l NumberList, fn Func) (l2 interface{}, err error) {
	ll2 := make( NumberList, len(l))

	for i, v := range l {
		var intf interface{}
		intf, err = fn.Call([]interface{}{v})
		if err != nil {
			return
		}
		if t, ok := intf.( *Number); ok {
			ll2[i] = t
		} else {
			return nil, fmt.Errorf("Function passed to map must return the same type that the list map is being applied to contains")
		}
	}
  
  l2 = ll2
  
  return
}

func listReduceNumberList(l NumberList, fn Func, memo *Number) (n *Number, err error) {
	for _, v := range l {
		var intf interface{}
    intf, err = fn.Call([]interface{}{memo, v})
    if err != nil {
      return
    }
    if t, ok := intf.( *Number); ok {
      memo = t
    } else {
      return nil, fmt.Errorf("Function passed to reduce must return the same type that the list reduce is being applied to contains")
    }
	}
	n = memo
	return
}
